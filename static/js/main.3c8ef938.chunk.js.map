{"version":3,"sources":["components/Header.js","components/Container.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","target","href","compounds","RegisterCompound","props","change","event","name","value","setState","register","preventDefault","state","newCompound","compoundID","wells","push","transfer","transferFrom","newWells","i","length","includes","console","log","search","message","compoundIDString","document","querySelector","innerHTML","this","className","id","type","placeholder","onChange","onClick","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3c8ef938.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Header = () => (\r\n    <Fragment>\r\n        <header>\r\n            <div>\r\n                <h1>\r\n                    Compound Tracking\r\n                </h1>\r\n                <h3>Kaleido Code Challenge by <a target=\"blank\" href=\"https://www.megankatherineobrien.com/\">Megan Katherine O'Brien</a></h3>\r\n                <p>Submitted on 03/25/2020</p>\r\n            </div>\r\n        </header>\r\n    </Fragment>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\n//initializing outside of component so it wont re-write\r\nlet compounds = [];\r\n\r\n//stateful component that handle all methods and needed data\r\nclass RegisterCompound extends Component {\r\n    constructor(props) {\r\n        //binding this keyword to this class\r\n        super(props);\r\n        //setting state to manage needed data\r\n        this.state = {\r\n            compoundID: '',\r\n            wells: '',\r\n            transferFrom: '',\r\n            newWells: '',\r\n            search: '',\r\n        }\r\n    }\r\n\r\n    change = (event) => {\r\n        //grabbing name and value for form field that is being changed\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        //updating state for field inputs\r\n        this.setState(() => {\r\n            return {\r\n                [name]: value,\r\n            }\r\n        });\r\n    }\r\n\r\n    register = (event) => {\r\n        event.preventDefault();\r\n\r\n        const {\r\n            compoundID,\r\n            wells,\r\n        } = this.state;\r\n\r\n        const newCompound = {\r\n            compoundID,\r\n            wells,\r\n        }\r\n\r\n        //adding the newCompound object to the compounds array.\r\n        compounds.push(newCompound);\r\n        \r\n        //updating state with the compounds array\r\n        this.setState(() => {\r\n            return {\r\n                compounds\r\n            }\r\n        });\r\n\r\n        //resetting the form fields need to do this manually because I am preventing default submit\r\n        this.setState(() => {\r\n            return {\r\n                compoundID: '',\r\n                wells: '',\r\n            }\r\n        });\r\n    }\r\n\r\n    transfer = (event) => {\r\n        event.preventDefault();\r\n\r\n        const {\r\n            transferFrom,\r\n            newWells,\r\n        } = this.state;\r\n\r\n        //search for transfer from well if at least one compound is registered\r\n        if (this.state.compounds) {\r\n\r\n            for (let i = 0; i < this.state.compounds.length; i++) {\r\n                //console.log(this.state.compounds[i].wells);\r\n                const wellsString = this.state.compounds[i].wells;\r\n\r\n                if (wellsString.includes(transferFrom)) {\r\n                    //grab the compound in it\r\n                    const compoundIDString = this.state.compounds[i].compoundID;\r\n\r\n                    //create newCompounds for transfer to wells with that compound in them\r\n                    const newCompound = {\r\n                        compoundID: compoundIDString,\r\n                        wells: newWells,\r\n                    }\r\n\r\n                    //update compounds array with newCompounds\r\n                    compounds.push(newCompound);\r\n\r\n                    //update state with the new compounds array\r\n                    this.setState(() => {\r\n                        return {\r\n                            compounds,\r\n                        };\r\n                    });\r\n\r\n                    //stopping once a match is found\r\n                    break;\r\n\r\n                }\r\n            }\r\n        } else {\r\n            console.log('Error! Please register at least one compound.');\r\n        }\r\n    }\r\n\r\n    search = (event) => {\r\n        event.preventDefault();\r\n\r\n        const {\r\n            search\r\n        } = this.state;\r\n\r\n        //find well from search field if at least one compound is registered\r\n        if (this.state.compounds) {\r\n\r\n            let message;\r\n\r\n            for (let i = 0; i < this.state.compounds.length; i++) {\r\n                const wellsString = this.state.compounds[i].wells;\r\n\r\n                if (wellsString.includes(search)) {\r\n                    //grab associated compound\r\n                    const compoundIDString = this.state.compounds[i].compoundID;\r\n\r\n                    //show well and compound on screen\r\n                    message = `${search} contains Compound: ${compoundIDString}`;\r\n                    document.querySelector('.search-results').innerHTML = message;\r\n                }\r\n            }\r\n        } else {\r\n            console.log('Error! Please register at least one compound.');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            compoundID,\r\n            wells,\r\n            transferFrom,\r\n            newWells,\r\n            search,\r\n        } = this.state;\r\n\r\n        console.log('STATE: ', this.state);\r\n\r\n        return (\r\n            <div className=\"register-compound-container\">\r\n                <h3>Register a Compound</h3>\r\n                <div className=\"register-compound-modal\">\r\n                    <form id=\"register-compound-form\" className=\"register-compound-form\">\r\n                        <input \r\n                            id=\"compoundID\"\r\n                            name=\"compoundID\"\r\n                            type=\"text\"\r\n                            placeholder=\"Compound ID...\"\r\n                            onChange={this.change}\r\n                            value={compoundID} />\r\n                        <input \r\n                            id=\"wells\"\r\n                            name=\"wells\"\r\n                            type=\"text\"\r\n                            placeholder=\"Well(s)...\"\r\n                            onChange={this.change}\r\n                            value={wells} />\r\n                        <button onClick={this.register} className=\"register\">Register</button>\r\n                    </form>\r\n                </div>\r\n                <h3>Transfer Well Content</h3>\r\n                <div className=\"transfer-compound-modal\">\r\n                    <form id=\"transfer-compound-form\" className=\"transfer-compound-form\">\r\n                        <input \r\n                            id=\"transferFrom\"\r\n                            name=\"transferFrom\"\r\n                            type=\"text\"\r\n                            placeholder=\"Well to transfer from...\"\r\n                            onChange={this.change}\r\n                            value={transferFrom} />\r\n                        <input \r\n                            id=\"newWells\"\r\n                            name=\"newWells\"\r\n                            type=\"text\"\r\n                            placeholder=\"Well(s) to transfer to...\"\r\n                            onChange={this.change}\r\n                            value={newWells} />\r\n                        <button onClick={this.transfer} className=\"transfer\">Transfer</button>\r\n                    </form>\r\n                </div>\r\n                <h3>Retrieve Well Content</h3>\r\n                <div className=\"search-container\">\r\n                    <form id=\"search-form\" className=\"search-form\">\r\n                        <input \r\n                            id=\"search\"\r\n                            name=\"search\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search a well...\"\r\n                            onChange={this.change}\r\n                            value={search} />\r\n                        <button onClick={this.search} className=\"search\">Search</button>\r\n                    </form>\r\n                    <div className=\"search-results\">\r\n                        {/* Empty div will show content on search */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterCompound;","import React from 'react';\nimport './App.css';\n\nimport Header from './Header';\nimport Container from './Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}